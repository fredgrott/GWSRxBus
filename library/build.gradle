apply plugin: 'com.android.library'
apply plugin: 'de.hannesstruss.godot'

apply plugin: 'com.github.dcendents.android-maven'

def libVersionCode = 1
def libVersionName = "1.0.0.1"
// if its a snapshot than version needs to be commit hash instead
// and end user of lib will put the suffix -SNAPSHOT or commit hash and classifier aar to get
//lib module version number
version = libVersionName
def siteUrl = 'https://github.com/shareme/GWSRxBus'
def gitUrl = 'https://github.com/shareme/GWSRxBus.git'
group = "com.github.shareme"


android {
    compileSdkVersion rootProject.ext.getAt("androidCompileSdkVersion")
    buildToolsVersion rootProject.ext.getAt("androidBuildToolsVersion")


    defaultConfig {
        minSdkVersion rootProject.ext.getAt("androidMinSdkVersion")
        targetSdkVersion rootProject.ext.getAt("androidMinSdkVersion")

        versionCode libVersionCode
        versionName libVersionName

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }
    packagingOptions {
        exclude 'LICENSE.txt'
    }
    lintOptions {
        abortOnError false
    }

    aaptOptions {
        noCompress 'txt'
        ignoreAssetsPattern "!.svn:!.git:!.ds_store:!*.scc:.*:<dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }


    testOptions {
        //puts instrumented test results in reports/androidTests
        //unit tests are in reports/tests
        reportDir = "$rootProject.ext.ourReportsDir/androidTests"
        unitTests.all {
            testLogging {
                events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            }
        }
    }

    jacoco {
        version = rootProject.ext.getAt("jacocoVersion")
    }

    buildTypes {
        debug{
            debuggable true
            minifyEnabled false
            testCoverageEnabled true

        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}
// When support libs are out of synch with the updated version of support annotations
// we force gradle to use only one version between the conflicting versions
//noinspection GroovyAssignabilityCheck
configurations.all {
    resolutionStrategy.force 'com.android.support:support-annotations:23.1.0'
}


dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile rootProject.ext.tddJunitDependencies.junit
    testCompile rootProject.ext.tddJunitDependencies.mockito
    testCompile rootProject.ext.tddJunitDependencies.assertjJunitCore

    compile rootProject.ext.androidSupportDependencies.appCompat
    androidTestCompile rootProject.ext.instrumentedTestDependencies.espressoContrib
    androidTestCompile rootProject.ext.instrumentedTestDependencies.espressoCore
    androidTestCompile rootProject.ext.instrumentedTestDependencies.espressoRunner
    androidTestCompile(rootProject.ext.instrumentedTestDependencies.assertjAndroid){
        exclude group: 'com.android.support'
    }
    androidTestCompile(rootProject.ext.instrumentedTestDependencies.assertjAppCompat){
        exclude group: 'com.android.support'
    }

    compile rootProject.ext.regularDependencies.rxjava
    compile rootProject.ext.regularDependencies.rxandroid

}
install {
    repositories.mavenInstaller{
        pom {
            project {
                packaging 'aar'
                name 'GWSRxBus'
                url siteUrl

                licenses {
                    license{
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id 'shareme'
                        name 'Fred Grott'
                        email 'fred.grott@gmail.com'
                    }
                }
                scm {
                    connection gitUrl
                    developerConnection gitUrl
                    url siteUrl
                }
            }
        }
    }
}

task sourcesJar(type: Jar){
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}
task javadoc(type: Javadoc){
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}
task javadocJar(type: Jar, dependsOn: javadoc){
    classifier = 'javadoc'
    from javadoc.destinationDir
}
artifacts {
    archives javadocJar
    archives sourcesJar
}