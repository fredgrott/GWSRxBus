apply plugin: 'com.android.application'
apply plugin: 'de.hannesstruss.godot'
apply plugin: 'hugo'
apply plugin: 'spoon'
apply plugin: 'org.moallemi.advanced-build-version'
apply plugin: 'view-inspector'


advancedVersioning {
    nameOptions {
        versionMajor 1
        versionBuild 0
    }
    codeOptions {

        dependsOnTasks 'release'

    }
    //if flavors than re use nameFormat to include the flavorName
    outputOptions {
        renameOutput true

    }
}

def appVersionName = advancedVersioning.versionName
def appVersionCode = advancedVersioning.versionCode



android {
    compileSdkVersion rootProject.ext.getAt("androidCompileSdkVersion")
    buildToolsVersion rootProject.ext.getAt("androidBuildToolsVersion")


    defaultConfig {
        applicationId "com.github.shareme.gwsrxbus"
        minSdkVersion rootProject.ext.getAt("androidMinSdkVersion")
        targetSdkVersion rootProject.ext.getAt("androidMinSdkVersion")

        versionCode appVersionCode
        versionName appVersionName

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    packagingOptions {
        exclude 'LICENSE.txt'
    }
    lintOptions {
        abortOnError false
    }


    aaptOptions {
        noCompress 'txt'
        ignoreAssetsPattern "!.svn:!.git:!.ds_store:!*.scc:.*:<dir>_*:!CVS:!thumbs.db:!picasa.ini:!*~"
    }

    signingConfigs {

        release {
            //props stored in gradle.properties at userhome .gradle subfolder
            // for product release and you just substitute the correct vars
            // otherwise for demo of libs use what is listed

            storeFile file('demokey.jks')
            storePassword 'droiddroid'
            keyAlias 'dkey'
            keyPassword 'droiddroid'
        }



    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    testOptions {
        //puts instrumented test results in reports/androidTests
        //unit tests are in reports/tests
        reportDir = "$rootProject.ext.ourReportsDir/androidTests"
        unitTests.all {
            testLogging {
                events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            }
        }
    }

    jacoco {
        version = rootProject.ext.getAt("jacocoVersion")
    }

    buildTypes {
        debug{
            debuggable true
            minifyEnabled false
            testCoverageEnabled true
            applicationIdSuffix '.dev'
            versionNameSuffix '-dev'
        }

        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro', 'proguard-matches-android-optimize.pro'
            signingConfig signingConfigs.release
            applicationIdSuffix '.release'
            versionNameSuffix '-release'

        }

    }
}
//noinspection GroovyMissingReturnStatement
spoon {

    debug = true

    baseOutputDir = file("$rootProject.ext.ourReportsDir/spoon")

    if (project.hasProperty('spoonClassName')) {
        className = project.spoonClassName

        if (project.hasProperty('spoonMethodName')) {
            methodName = project.spoonMethodName
        }
    }

}


dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile rootProject.ext.tddJunitDependencies.junit
    testCompile rootProject.ext.tddJunitDependencies.mockito
    testCompile rootProject.ext.tddJunitDependencies.assertjJunitCore

    compile rootProject.ext.androidSupportDependencies.appCompat
    debugCompile rootProject.ext.appDependencies.leakcanaryAndroidDC
    releaseCompile rootProject.ext.appDependencies.leakcanaryAndroidNOOPRC
    compile rootProject.ext.appDependencies.timber

    androidTestCompile rootProject.ext.instrumentedTestDependencies.espressoContrib
    androidTestCompile rootProject.ext.instrumentedTestDependencies.espressoCore
    androidTestCompile rootProject.ext.instrumentedTestDependencies.espressoRunner
    androidTestCompile rootProject.ext.instrumentedTestDependencies.spoonClient
    compile rootProject.ext.regularDependencies.butterknife
    compile rootProject.ext.appDependencies.otto
    androidTestCompile(rootProject.ext.instrumentedTestDependencies.assertjAndroid){
        exclude group: 'com.android.support'
    }
    androidTestCompile(rootProject.ext.instrumentedTestDependencies.assertjAppCompat){
        exclude group: 'com.android.support'
    }

    compile project(":library")

}
//uncomment to enable
// androidTest gets a class named SystemAnimations and animations disabled and enabled within
// the ApplicationTest setUp and tearDown
// an AndroidManifest.xml stripped of its application tag is
task grantAnimationPermission(type: Exec, dependsOn: 'installDebug') { // or install{productFlavour}{buildType}
    commandLine "adb shell pm grant $android.defaultConfig.testApplicationId android.permission.SET_ANIMATION_SCALE".split(' ')
}

tasks.whenTaskAdded { task ->
    if (task.name.startsWith('connectedAndroidTest')) {
        task.dependsOn grantAnimationPermission
    }
}
